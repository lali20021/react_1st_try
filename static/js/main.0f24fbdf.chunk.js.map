{"version":3,"sources":["Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["Table","_this$props","this","props","characterData","removeCharacter","react_default","a","createElement","Table_TableHeader","Table_TableBody","Component","TableHeader","TableBody","rows","map","row","index","key","name","job","onClick","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","value","setState","defineProperty","submitForm","handleSubmit","state","initialState","_this$state","onSubmit","onFormSubmit","type","onChange","App","characters","filter","character","i","concat","toConsumableArray","className","src_Table","src_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0f24fbdf.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Table extends Component {\n  render() {\n    const { characterData, removeCharacter } = this.props\n\n    return (\n      <table>\n        <TableHeader />\n        <TableBody\n          characterData={characterData}\n          removeCharacter={removeCharacter}/>\n      </table>\n    )\n  }\n}\n\n  const TableHeader = () => {\n    return (\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Job</th>\n          </tr>\n        </thead>\n    )\n  }\n\n  const TableBody = props => {\n    const rows = props.characterData.map((row, index) => {\n      return (\n        <tr key={index}>\n          <td>{row.name}</td>\n          <td>{row.job}</td>\n          <td>\n            <button onClick={() => props.removeCharacter(index)}>Delete</button>\n          </td>\n        </tr>\n      )\n    })\n\n    return <tbody>{rows}</tbody>\n  }\n\nexport default Table\n","import React, { Component } from 'react'\n\nclass Form extends Component {\n  constructor(props) {\n    super(props)\n\n    this.initialState = {\n      name: '',\n      job: '',\n    }\n\n    this.state = this.initialState\n  }\n\n  handleChange = event => {\n    const { name, value } = event.target\n\n    this.setState({\n      [name]: value,\n    })\n  }\n\n  submitForm = () => {\n\n    this.props.handleSubmit(this.state)\n    this.setState(this.initialState)\n  }\n\n\n\nrender() {\n  const { name, job } = this.state;\n\n  return (\n    <form onSubmit={this.onFormSubmit}>\n      <label>Name</label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={this.handleChange} />\n      <label>Job</label>\n      <input\n        type=\"text\"\n        name=\"job\"\n        value={job}\n        onChange={this.handleChange} />\n        <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\n    </form>\n  );\n}\n}\n\nexport default Form\n","import React, { Component } from 'react'\nimport Table from './Table'\nimport Form from './Form'\n\nclass App extends Component {\n  state = {\n  characters: [],\n  }\n\nremoveCharacter = index => {\n  const { characters } = this.state;\n\n  this.setState({\n    characters: characters.filter((character, i) => {\n      return i !== index;\n    })\n  });\n}\n\nhandleSubmit = character => {\n  this.setState({ characters: [...this.state.characters, character] })\n}\n\nrender () {\n  const { characters } = this.state;\n\n    return (\n      <div className=\"container\">\n        <h1>React Tutorial</h1>\n        <p>Add a character with a name and a job to the table.</p>\n        <Table\n          characterData={characters}\n          removeCharacter={this.removeCharacter}\n        />\n        <h3>Add New</h3>\n        <Form handleSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}